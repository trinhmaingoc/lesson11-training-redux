{"version":3,"sources":["training/actions/index.js","components/TaskForm.js","components/TaskControlSearch.js","components/TaskControlSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","training/reducers/sort.js","training/reducers/index.js","training/reducers/status.js","training/constants/ActionTypes.js","training/Demo.js","App.js","serviceWorker.js","index.js"],"names":["payload","TaskForm","props","onCloseForm","onChange","event","target","name","value","type","checked","setState","onSubmit","preventDefault","state","onClear","id","status","this","task","prevProps","prevState","className","onClick","Component","Search","onSearch","keyword","placeholder","Sort","sortBy","sortValue","sort","by","parseInt","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","Control","TaskControlSearch","TaskControlSort","TaskItem","onUpdateStatus","onDeleteItem","onUpdateItem","index","TaskList","onFilter","filterName","filterStatus","tasks","elmTasks","map","key","initialState","myReducer","combineReducers","store","createStore","console","log","getState","dispatch","App","onToggleForm","isDisplayForm","taskEditting","onOpenForm","data","findIndex","generateID","push","localStorage","setItem","JSON","stringify","splice","filter","getItem","parse","Math","floor","random","toString","substring","s4","toLowerCase","indexOf","a","b","elmTaskForm","TaskControl","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2de6f240.chunk.js","sourcesContent":["import * as types from '../constants/ActionTypes';\r\n\r\nexport const status = (payload) => ({\r\n    type: types.TOGGLE_STATUS,\r\n    payload\r\n});\r\n\r\nexport const sort = (payload) => ({\r\n    type: types.SORT,\r\n    payload\r\n})\r\n","import React, { Component } from 'react'\r\n\r\nexport class TaskForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n      id: '',\r\n      name: '',\r\n      status: false,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.props.task) {\r\n      this.setState({\r\n        id: this.props.task.id,\r\n        name: this.props.task.name,\r\n        status: this.props.task.status\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n    if (prevProps.task !== this.props.task) {\r\n      if (this.props.task) {\r\n        this.setState({\r\n          id: this.props.task.id,\r\n          name: this.props.task.name,\r\n          status: this.props.task.status,\r\n        })\r\n      } else {\r\n        this.onClear();\r\n      }\r\n    }\r\n  }\r\n  \r\n  onCloseForm = () => {\r\n    this.props.onCloseForm();\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    if (name === \"status\") {\r\n      value = target.value === \"true\" | target.value === true ? true : false;\r\n    }\r\n    this.setState({\r\n      [name]: value,\r\n    })\r\n  }\r\n\r\n  onSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    this.onClear();\r\n    this.onCloseForm();\r\n  }\r\n\r\n  onClear = () => {\r\n    this.setState({\r\n      id: '',\r\n      name: '',\r\n      status: false,\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { id, name, status } = this.state;\r\n    return (\r\n      <div className=\"col-xs-12 col-sm-4 col-md-4 col-lg-4\">\r\n        {/* Form */}\r\n        <div className=\"panel panel-warning\">\r\n          <div className=\"panel-heading\">\r\n            <h3 className=\"panel-title\">\r\n              {id ? \"Cập nhật công việc\" : \"Thêm Công Việc\"}\r\n              <span \r\n              className=\"fa fa-times-circle text-right\"\r\n              onClick={this.onCloseForm}\r\n              ></span>\r\n            </h3>\r\n          </div>\r\n          <div className=\"panel-body\">\r\n            <form onSubmit={this.onSubmit} >\r\n              <div className=\"form-group\">\r\n                <label>Tên: </label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  name=\"name\"\r\n                  value={name}\r\n                  onChange={this.onChange}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Trạng Thái: </label>\r\n                <select\r\n                  name=\"status\"\r\n                  className=\"form-control\"\r\n                  value={status}\r\n                  onChange={this.onChange}\r\n                >\r\n                  <option value={false}>Ẩn</option>\r\n                  <option value={true}>Kích Hoạt</option>\r\n                </select>\r\n              </div>\r\n              <div className=\"text-center\">\r\n                <button type=\"submit\" className=\"btn btn-warning\">\r\n                  <span className=\"fa fa-plus mr-5\" ></span>Lưu Lại\r\n                    </button> &nbsp;\r\n                    <button \r\n                      type=\"reset\" \r\n                      className=\"btn btn-danger\"\r\n                      onClick={this.onClear}\r\n                    >\r\n                  <span className=\"fa fa-close mr-5\" ></span>Hủy Bỏ\r\n                    </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { Component } from 'react'\r\n\r\nexport class Search extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             keyword: '',\r\n        }\r\n    };\r\n\r\n    onChange = (event) => {\r\n        const target = event.target;\r\n        const name = target.name;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        name=\"keyword\"\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Nhập từ khóa ...\"\r\n                        onChange={this.onChange}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button \r\n                            type=\"button\" \r\n                            className=\"btn btn-primary\"\r\n                            onClick={this.onSearch}\r\n                        >\r\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\r\n                        </button>\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search\r\n","import React, { Component } from 'react'\r\n\r\nexport class Sort extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             sort: {\r\n                 by: 'name',\r\n                 value: 1\r\n             }\r\n        }\r\n    };\r\n\r\n    onClick = (sortBy, sortValue, event) => {\r\n        this.setState({\r\n            sort: {\r\n                by: sortBy,\r\n                value: parseInt(sortValue)\r\n            }\r\n        });\r\n        this.props.onSort(sortBy, sortValue);\r\n    }\r\n    \r\n    render() {\r\n        const { by, value } = this.state.sort;\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-6 col-md-6 col-lg-6 mt-15\">\r\n                <div className=\"dropdown\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-primary dropdown-toggle\"\r\n                        id=\"dropdownMenu1\"\r\n                        data-toggle=\"dropdown\"\r\n                        aria-haspopup=\"true\"\r\n                        aria-expanded=\"true\"\r\n                    >\r\n                        Sắp Xếp<span className=\"fa fa-caret-square-o-down ml-5\"></span>\r\n                    </button>\r\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\r\n                        <li onClick={()=>this.onClick('name', 1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\r\n                                    Tên A-Z\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('name', -1)}>\r\n                            <ul role=\"button\" className={(by==='name' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\r\n                                    Tên Z-A\r\n                                </span>\r\n                            </ul>\r\n                        </li>\r\n                        <li role=\"separator\" className=\"divider\"></li>\r\n                        <li  onClick={()=>this.onClick('status', -1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===-1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Kích Hoạt\r\n                            </ul>\r\n                        </li>\r\n                        <li onClick={()=>this.onClick('status', 1)}>\r\n                            <ul role=\"button\"  className={(by==='status' && value===1) ? \"sort_selected\" : \"\"}>\r\n                                Trạng Thái Ẩn\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sort\r\n","import React, { Component } from 'react'\r\nimport TaskControlSearch from './TaskControlSearch';\r\nimport TaskControlSort from './TaskControlSort';\r\n\r\nexport class Control extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"row\">\r\n        {/* Search */}\r\n        <TaskControlSearch \r\n          onSearch={this.props.onSearch}\r\n        />\r\n        {/* Sort */}\r\n        <TaskControlSort\r\n          onSort={this.props.onSort}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Control;\r\n","import React, { Component } from 'react'\r\n\r\nexport class TaskItem extends Component {\r\n  \r\n  onUpdateStatus = () => {\r\n    this.props.onUpdateStatus(this.props.task.id)\r\n  }\r\n\r\n  onDeleteItem = () => {\r\n    this.props.onDeleteItem(this.props.task.id)\r\n  }\r\n\r\n  onUpdateItem = () => {\r\n    this.props.onUpdateItem(this.props.task.id)\r\n  }\r\n\r\n  render() {\r\n    const { task, index } = this.props;\r\n    return (\r\n      <tr>\r\n        <td> { index + 1 } </td>\r\n        <td> { task.name } </td>\r\n        <td className=\"text-center\">\r\n          <span \r\n            className={task.status ? \"label label-danger status\" : \"label label-success status\"}\r\n            onClick={this.onUpdateStatus}\r\n          >\r\n            { task.status ? \"Kích Hoạt\" : \"Ẩn\" }\r\n          </span>\r\n        </td>\r\n        <td className=\"text-center\">\r\n          <button \r\n            type=\"button\" \r\n            className=\"btn btn-sm btn-warning\"\r\n            onClick={this.onUpdateItem}\r\n          >\r\n            <span className=\"fa fa-pencil mr-5\"></span>Sửa\r\n          </button> &nbsp;\r\n          <button \r\n            type=\"button\"\r\n            className=\"btn btn-sm btn-danger\"\r\n            onClick={this.onDeleteItem}\r\n          >\r\n            <span className=\"fa fa-trash mr-5\"></span>Xóa\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskItem\r\n","import React, { Component } from 'react'\r\nimport TaskItem from './TaskItem'\r\n\r\nexport class TaskList extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  \r\n    this.state = {\r\n       filterName: '',\r\n       filterStatus: -1\r\n    }\r\n  }\r\n\r\n  onChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    this.props.onFilter(\r\n      name === \"filterName\" ? value : this.state.filterName,\r\n      name === \"filterStatus\" ? value : this.state.filterStatus\r\n    );\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n  \r\n  render() {\r\n    const { tasks } = this.props;\r\n    const { filterName, filterStatus } = this.state;\r\n    const elmTasks = tasks.map((task, index) => (\r\n      <TaskItem \r\n        key={index}\r\n        task={task}\r\n        index={index}\r\n        onUpdateStatus={this.props.onUpdateStatus}\r\n        onDeleteItem={this.props.onDeleteItem}\r\n        onUpdateItem={this.props.onUpdateItem}\r\n      />\r\n    ))\r\n    return (\r\n      <div className=\"row mt-15 tasklist\">\r\n        <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 table-responsive\">\r\n          <table className=\"table table-bordered table-hover text-nowrap\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"text-center\">STT</th>\r\n                <th className=\"text-center\">Tên</th>\r\n                <th className=\"text-center\">Trạng Thái</th>\r\n                <th className=\"text-center\">Hành Động</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td></td>\r\n                <td>\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    value={filterName}\r\n                    name=\"filterName\"\r\n                    onChange={this.onChange}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <select\r\n                    name=\"filterStatus\"\r\n                    className=\"form-control\"\r\n                    value={filterStatus}\r\n                    onChange={this.onChange}\r\n                  >\r\n                    <option value={-1}>Tất Cả</option>\r\n                    <option value={0}>Ẩn</option>\r\n                    <option value={1}>Kích Hoạt</option>\r\n                  </select>\r\n                </td>\r\n                <td></td>\r\n              </tr>\r\n              {elmTasks}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TaskList\r\n","import * as types from './../constants/ActionTypes'\r\n\r\nconst initialState = {\r\n    by: 'status',\r\n    value: 1\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n    case types.SORT:\r\n        return { ...state, ...payload }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport status from './status';\r\nimport sort from './sort';\r\n\r\nconst myReducer = combineReducers({\r\n    status,\r\n    sort\r\n})\r\n\r\nexport default myReducer;","import * as types from '../constants/ActionTypes'\r\n\r\nconst initialState = false\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n    case types.TOGGLE_STATUS:\r\n        state = !state;\r\n        return state;\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","export const TOGGLE_STATUS = 'TOGGLE_STATUS';\r\nexport const SORT = 'SORT';","import { createStore } from 'redux';\r\nimport myReducer from './reducers';\r\nimport { status, sort } from './actions';\r\n\r\nconst store = createStore(myReducer);\r\nconsole.log('Default: ', store.getState());\r\n\r\n// Change status\r\nstore.dispatch(status());\r\nconsole.log('TOGGLE_STATUS: ', store.getState());\r\n\r\n// Update sort\r\nstore.dispatch(sort({\r\n    by: 'name',\r\n    value: -1\r\n}));\r\nconsole.log('SORT: ', store.getState());","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport TaskControl from './components/TaskControl';\nimport TaskList from './components/TaskList';\nimport { findIndex } from 'lodash'; // import _ if get all libratory\nimport './training/Demo';\n\nexport class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      tasks: [],\n      isDisplayForm: false,\n      taskEditting: null,\n      filter: {\n        name: '',\n        status: -1\n      },\n      keyword: '',\n      sort: {\n        by: '',\n        value: 1\n      }\n    }\n  }\n\n  componentDidMount() {\n    if (localStorage && localStorage.getItem('tasks')) {\n      this.setState({\n        tasks: JSON.parse(localStorage.getItem('tasks')),\n      })\n    };\n  }\n\n  // onGenerateData = () => {\n  //   const tasks = [\n  //     {\n  //       id: this.generateID(),\n  //       name: 'Học lập trình',\n  //       status: true,\n  //     },\n  //     {\n  //       id: this.generateID(),\n  //       name: 'Đi bơi',\n  //       status: false,\n  //     },\n  //     {\n  //       id: this.generateID(),\n  //       name: 'Ngủ',\n  //       status: true,\n  //     },\n  //   ];\n  //   this.setState({\n  //     tasks: tasks,\n  //   });\n  //   localStorage.setItem('tasks', JSON.stringify(tasks));\n  // }\n\n  s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  generateID() {\n    return this.s4() + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + '-' + this.s4() + this.s4() + this.s4();\n  }\n\n  onToggleForm = () => {\n    if (this.state.isDisplayForm && this.state.taskEditting !== null) {\n      this.setState({\n        isDisplayForm: true,\n        taskEditting: null\n      })\n    } else {\n      this.setState({\n        isDisplayForm: !this.state.isDisplayForm,\n        taskEditting: null,\n      })\n    }\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false,\n      taskEditting: null,\n    })\n  }\n  \n  onOpenForm = () => {\n    this.setState({\n      isDisplayForm: true,\n    })\n  }\n\n  onSubmit = (data) => {\n    const { tasks } = this.state;\n    if (data.id) {\n      // const index = this.findIndex(data.id);\n      const index = findIndex(tasks, (task) => {\n        return task.id === data.id;\n      });\n      tasks[index] = data;\n    } else {\n      data.id = this.generateID();\n      tasks.push(data);\n    }\n    this.setState({\n      tasks: tasks,\n    });\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }\n\n  onUpdateStatus = (id) => {\n    const { tasks } = this.state;\n    // const index = this.findIndex(id);\n    const index = findIndex(tasks, (task) => {\n      return task.id === id;\n    });\n    if (index !== -1) {\n      tasks[index].status = !tasks[index].status;\n      this.setState({\n        tasks: tasks,\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n    };\n  }\n\n  // findIndex = (id) => {\n  //   const { tasks } = this.state;\n  //   let result = -1;\n  //   tasks.forEach((task, index) => {\n  //     if (task.id === id) {\n  //       result = index;\n  //     }\n  //   });\n  //   return result;\n  // }\n\n  onDeleteItem = (id) => {\n    const { tasks } = this.state;\n    // const index = this.findIndex(id);\n    const index = findIndex(tasks, (task) => {\n      return task.id === id;\n    });\n    if (index !== -1) {\n      tasks.splice(index, 1);\n      this.setState({\n        tasks: tasks,\n      });\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      this.onCloseForm();\n    }\n  }\n\n  onUpdateItem = (id) => {\n    const { tasks } = this.state;\n    // const index = this.findIndex(id);\n    const index = findIndex(tasks, (task) => {\n      return task.id === id;\n    });\n    const taskEditting = tasks[index];\n    this.setState({\n      taskEditting: taskEditting,\n    });\n    this.onOpenForm();\n  }\n\n  onFilter = (filterName, filterStatus) => {\n    filterStatus = parseInt(filterStatus, 10);\n    this.setState({\n      filter: {\n        name: filterName,\n        status: filterStatus\n      },\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword: keyword,\n    })\n  };\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({\n      sort: {\n        by: sortBy,\n        value: sortValue\n      }\n    })\n  }\n\n  render() {\n    let { tasks, isDisplayForm, taskEditting, filter, keyword, sort } = this.state;\n\n    tasks = tasks.filter((task) => {\n      return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n    });\n\n    // tasks = filter(tasks, (task) => {\n    //   return task.name.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n    // })\n\n    if (filter) {\n      if (filter.name) {\n        tasks = tasks.filter((task) => {\n          return task.name.toLowerCase().indexOf(filter.name.toLowerCase()) !== -1;\n        })\n      }\n      if (filter.status !== -1) {\n        tasks = tasks.filter((task) => {\n          return task.status === (filter.status === 0 ? false : true);\n        })\n      }\n    };\n\n    if (sort.by==='name') {\n      tasks.sort((a, b) => {\n        if (a.name > b.name) return sort.value;\n        else if (a.name < b.name) return -sort.value;\n        else return 0;\n      })\n    } else {\n      tasks.sort((a, b) => {\n        if (a.status > b.status) return sort.value;\n        else if (a.status < b.status) return -sort.value;\n        else return 0;\n      })\n    }\n\n    const elmTaskForm = isDisplayForm ?\n      <TaskForm\n        onCloseForm={this.onCloseForm}\n        onSubmit={this.onSubmit}\n        task={taskEditting}\n      />\n      : '';\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"text-center\">\n          <h1>Quản Lý Công Việc</h1> <hr />\n        </div>\n\n        <div className=\"row\">\n          {elmTaskForm}\n\n          <div className={isDisplayForm ? \"col-xs-12 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={this.onToggleForm}\n            >\n              <span className=\"fa fa-plus mr-5\"></span>\n              Thêm Công Việc\n            </button>\n            {/* <button \n              type=\"button\" \n              className=\"btn btn-danger ml-5\"\n              onClick={this.onGenerateData}\n            >\n              Generate Data\n            </button> */}\n            {/* Search - Sort */}\n            <TaskControl \n              onSearch={this.onSearch}\n              onSort={this.onSort}\n            />\n            {/* List */}\n            <TaskList\n              tasks={tasks}\n              onUpdateStatus={this.onUpdateStatus}\n              onDeleteItem={this.onDeleteItem}\n              onUpdateItem={this.onUpdateItem}\n              onFilter={this.onFilter}\n            />\n          </div>\n\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}